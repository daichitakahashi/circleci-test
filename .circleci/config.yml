# Couldn't automatically generate a config from your source code.
# This is a generic template to serve as a base for your custom config

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  go: circleci/go@1.11.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  test:
    executor:
      name: go/default
      tag: '1.21.1'
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    # docker:
    #   # Specify the version you desire here
    #   # See: https://circleci.com/developer/images/image/cimg/base
    #   - image: cimg/go:1.21.1

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Replace this with a real test runner invocation
      - go/load-cache
      - go/mod-download
      - run:
        name: Go test
        command: go test . -v
      - go/save-cache
  # build:
  #   docker:
  #     - image: cimg/base:current
  #   steps:
  #     - checkout
  #     # Replace this with steps to build a package, or executable
  #     - run:
  #         name: Build an artifact
  #         command: touch example.txt
  #     - store_artifacts:
  #         path: example.txt
  # deploy:
  #   docker:
  #     - image: cimg/base:current
  #   steps:
  #     # Replace this with steps to deploy to users
  #     - run:
  #         name: deploy
  #         command: "#e.g. ./deploy.sh"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  example:
    jobs:
      - test
      # - build:
      #     requires:
      #       - test
      # - deploy:
      #     requires:
      #       - test
